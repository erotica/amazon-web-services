
  {
	"swagger": "2.0",
	"info": {
		"title": "AWS EC2 Container Registry API",
		"version": "1.0.0"
	},
	"schemes": ["http"],
	"produces": ["application/json"],
	"consumes": ["application/json"],
	"paths": {
		"/?Action=BatchCheckLayerAvailability&k=1": {
			"get": {
				"summary": " Batch Check Layer Availability ",
				"description": "Check the availability of multiple image layers in a specified registry and repository.",
				"operationId": "batchCheckLayerAvailability",
				"parameters": [{
					"in": "query",
					"name": "layerDigests",
					"description": "The digests of the image layers to check.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The name of the repository that is associated with the image layers to check.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Layer Availability"]
			}
		},
		"/?Action=BatchDeleteImage&k=1": {
			"get": {
				"summary": " Batch Delete Image ",
				"description": "Deletes a list of specified images within a specified repository.",
				"operationId": "batchDeleteImage",
				"parameters": [{
					"in": "query",
					"name": "imageIds",
					"description": "A list of image ID references that correspond to images to delete. The            format of the imageIds reference is imageTag=tag or                imageDigest=digest.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The repository that contains the image to delete.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Image"]
			}
		},
		"/?Action=BatchGetImage&k=1": {
			"get": {
				"summary": " Batch Get Image ",
				"description": "Gets detailed information for specified images within a specified repository.",
				"operationId": "batchGetImage",
				"parameters": [{
					"in": "query",
					"name": "acceptedMediaTypes",
					"description": "The accepted media types for the request.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "imageIds",
					"description": "A list of image ID references that correspond to images to describe. The            format of the imageIds reference is imageTag=tag or                imageDigest=digest.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The repository that contains the images to describe.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Image"]
			}
		},
		"/?Action=CompleteLayerUpload&k=1": {
			"get": {
				"summary": " Complete Layer Upload ",
				"description": "Inform Amazon ECR that the image layer upload for a specified registry, repository name, and upload ID, has completed.",
				"operationId": "completeLayerUpload",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Layer Upload"]
			}
		},
		"/?Action=CreateRepository&k=1": {
			"get": {
				"summary": " Create Repository ",
				"description": "Creates an image repository.",
				"operationId": "createRepository",
				"parameters": [{
					"in": "query",
					"name": "repositoryName",
					"description": "The name to use for the repository. The repository name may be specified on its own (such            as nginx-web-app) or it can be prepended with a namespace to group the            repository into a category (such as project-a/nginx-web-app).",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Repositories"]
			}
		},
		"/?Action=DeleteRepository&k=1": {
			"get": {
				"summary": " Delete Repository ",
				"description": "Deletes an existing image repository.",
				"operationId": "deleteRepository",
				"parameters": [{
					"in": "query",
					"name": "force",
					"description": "Force the deletion of the repository if it contains images.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The name of the repository to delete.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Repositories"]
			}
		},
		"/?Action=DeleteRepositoryPolicy&k=1": {
			"get": {
				"summary": " Delete Repository Policy ",
				"description": "Deletes the repository policy from a specified repository.",
				"operationId": "deleteRepositoryPolicy",
				"parameters": [{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The name of the repository that is associated with the repository policy to delete.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Repository Policies"]
			}
		},
		"/?Action=DescribeImages&k=1": {
			"get": {
				"summary": " Describe Images ",
				"description": "Returns metadata about the images in a repository, including image size, image            tags, and creation date.",
				"operationId": "describeImages",
				"parameters": [{
					"in": "query",
					"name": "filter",
					"description": "The filter key and value with which to filter your DescribeImages            results.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "imageIds",
					"description": "The list of image IDs for the requested repository.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "maxResults",
					"description": "The maximum number of repository results returned by DescribeImages in            paginated output. When this parameter is used, DescribeImages only            returns maxResults results in a single page along with a            nextToken response element. The remaining results of the initial            request can be seen by sending another DescribeImages request with            the returned nextToken value. This value can be between 1             and 100. If this parameter is not used, then            DescribeImages returns up to 100 results and a            nextToken value, if applicable.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "nextToken",
					"description": "The nextToken value returned from a previous paginated            DescribeImages request where maxResults was used and            the results exceeded the value of that parameter. Pagination continues from the end of            the previous results that returned the nextToken value. This value is            null when there are no more results to return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repository in            which to describe images. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Images"]
			}
		},
		"/?Action=DescribeRepositories&k=1": {
			"get": {
				"summary": " Describe Repositories ",
				"description": "Describes image repositories in a registry.",
				"operationId": "describeRepositories",
				"parameters": [{
					"in": "query",
					"name": "maxResults",
					"description": "The maximum number of repository results returned by DescribeRepositories in            paginated output. When this parameter is used, DescribeRepositories only            returns maxResults results in a single page along with a                nextToken response element. The remaining results of the initial            request can be seen by sending another DescribeRepositories request with            the returned nextToken value. This value can be between 1             and 100. If this parameter is not used, then                DescribeRepositories returns up to 100 results and a                nextToken value, if applicable.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "nextToken",
					"description": "The nextToken value returned from a previous paginated                DescribeRepositories request where maxResults was used and            the results exceeded the value of that parameter. Pagination continues from the end of            the previous results that returned the nextToken value. This value is                null when there are no more results to return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryNames",
					"description": "A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Repositories"]
			}
		},
		"/?Action=GetAuthorizationToken&k=1": {
			"get": {
				"summary": " Get Authorization Token ",
				"description": "Retrieves a token that is valid for a specified registry for 12 hours.",
				"operationId": "getAuthorizationToken",
				"parameters": [{
					"in": "query",
					"name": "registryIds",
					"description": "A list of AWS account IDs that are associated with the registries for which to get authorization tokens. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Authorization Tokens"]
			}
		},
		"/?Action=GetDownloadUrlForLayer&k=1": {
			"get": {
				"summary": " Get Download Url For Layer ",
				"description": ".Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.",
				"operationId": "getDownloadUrlForLayer",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Layers"]
			}
		},
		"/?Action=GetRepositoryPolicy&k=1": {
			"get": {
				"summary": " Get Repository Policy ",
				"description": "Retrieves the repository policy for a specified repository.",
				"operationId": "getRepositoryPolicy",
				"parameters": [{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The name of the repository whose policy you want to retrieve.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Repository Policies"]
			}
		},
		"/?Action=InitiateLayerUpload&k=1": {
			"get": {
				"summary": " Initiate Layer Upload ",
				"description": "Notify Amazon ECR that you intend to upload an image layer.",
				"operationId": "initiateLayerUpload",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Layer Upload"]
			}
		},
		"/?Action=ListImages&k=1": {
			"get": {
				"summary": " List Images ",
				"description": "Lists all the image IDs for a given repository.",
				"operationId": "listImages",
				"parameters": [{
					"in": "query",
					"name": "filter",
					"description": "The filter key and value with which to filter your ListImages            results.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "maxResults",
					"description": "The maximum number of image results returned by ListImages in paginated            output. When this parameter is used, ListImages only returns                maxResults results in a single page along with a nextToken            response element. The remaining results of the initial request can be seen by sending            another ListImages request with the returned nextToken value.            This value can be between 1 and 100. If this parameter is            not used, then ListImages returns up to 100 results and a                nextToken value, if applicable.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "nextToken",
					"description": "The nextToken value returned from a previous paginated                ListImages request where maxResults was used and the            results exceeded the value of that parameter. Pagination continues from the end of the            previous results that returned the nextToken value. This value is                null when there are no more results to return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repository to list images in. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The repository whose image IDs are to be listed.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Images"]
			}
		},
		"/?Action=PutImage&k=1": {
			"get": {
				"summary": " Put Image ",
				"description": "Creates or updates the image manifest and tags associated with an image.",
				"operationId": "putImage",
				"parameters": [{
					"in": "query",
					"name": "imageManifest",
					"description": "The image manifest corresponding to the image to be uploaded.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "imageTag",
					"description": "The tag to associate with the image. This parameter is required for images that use            the Docker Image Manifest V2 Schema 2 or OCI formats.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The name of the repository in which to put the image.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Images"]
			}
		},
		"/?Action=SetRepositoryPolicy&k=1": {
			"get": {
				"summary": " Set Repository Policy ",
				"description": "Applies a repository policy on a specified repository to control access permissions.",
				"operationId": "setRepositoryPolicy",
				"parameters": [{
					"in": "query",
					"name": "force",
					"description": "If the policy you are attempting to set on a repository policy would prevent you from            setting another policy in the future, you must force the SetRepositoryPolicy            operation. This is intended to prevent accidental repository lock outs.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "policyText",
					"description": "The JSON repository policy text to apply to the repository.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "registryId",
					"description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "repositoryName",
					"description": "The name of the repository to receive the policy.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Repository Policies"]
			}
		},
		"/?Action=UploadLayerPart&k=1": {
			"get": {
				"summary": " Upload Layer Part ",
				"description": "Uploads an image layer part to Amazon ECR.",
				"operationId": "uploadLayerPart",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": ["Layer Parts"]
			}
		}
	},
	"definitions": []
}